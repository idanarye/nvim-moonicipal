==============================================================================
Moonicipal - Task Runner for Rapidly Changing Personal Tasks        *moonicipal*

Moonicipal is a task runner that focuses on personal tasks that are easy to
write and to change:

* Task files are personal - users can edit them without breaking the
  workflow for other developers that use the same project.
* Tasks are Lua functions that run inside Neovim - they can can easily
  access all of Neovim's context and functionalities, and easily interact
  with other Neovim plugins.
* The task functions always run in coroutines, and some helpers are provided
  for writing async code instead of using callbacks.
* The task file is reloaded each time a user runs a task, so it can be
  edited rapidly.
* Caching facilities for saving things like build configuration or
  test/example-to-run without having to change the tasks file each time.

Moonicipal is the successor to the Pythonic test runner Omnipytent
(https://github.com/idanarye/vim-omnipytent). Since Moonicipal is written in
Lua and executes tasks that are written in Lua, it allows for better
integration with Neovim and with Lua plugins and for simpler semantics of
asynchronous tasks.

==============================================================================
Table of Contents                                          *moonicipal.contents*

Moonicipal - Task Runner for Rapidly Changing Personal Tasks ······ |moonicipal|
Moonicipal setup ············································ |moonicipal-setup|
Moonicipal quick start ································ |moonicipal-quick-start|
Moonicipal commands ······································ |moonicipal-commands|
API avaiable from inside a Moonicipal task ···················· |MoonicipalTask|

==============================================================================

M.setup({config})                                             *moonicipal.setup*
    Configure Moonicipal and create the Vim commands.

    Parameters: ~
        {config}  (MoonicipalSettings)

    See: ~
        |MoonicipalSettings|


M.include({namespace}, {lib})                               *moonicipal.include*
    Include a tasks library.

    Note: this is the old way. See |moonicipal.import| for the new way.

    This function should only be used inside the tasks file, to add tasks
    libraries so  that their tasks could be invoked with |:MC|.

    Task libraries can be defined with |moonicipal.tasks_lib| or with
    |moonicipal.merge_libs| (which joins multiple tasks libraries together).
    @deprecated Use moonicipal.import instead
    @generic L : MoonicipalRegistrar | fun(opts: MoonicipalRegistrarDecoration) | MoonicipalTask | table

    Parameters: ~
        {namespace}  (string)  Prefix all tasks in the library with this namespace (separated with "::")
        {lib}        (L)

    Returns: ~
        (L)   The tasks library passed to it, so that it can be used programmatically


MoonicipalImportOptions                                *MoonicipalImportOptions*
    Fields for the `opts` argument of |moonicipal.import|.

    Fields: ~
        {namespace?}  (string)  Import the library into a namespace


M.import({lib_gen_function}, {opts?})                        *moonicipal.import*
    Import a tasks library

    This function is supposed to replace |moonicipal.include| and works quite
    differently.

    To import a library, feed it a function that returns two values - the task
    object returned from |moonicipal.tasks_lib| (which should be called inside
    that function) and as an optional second return value - a configuration
    object.

    For example: if you have this in a file named "my_lib.lua"

        local moonicipal = require'moonicipal'

        return function()
            local L = moonicipal.tasks_lib()
            local cfg = {
                ---@type string
                main_file = nil,
            }

            function L:run()
                vim.cmd('!python ' .. cfg.main_file)
            end

            return L, cfg
        end

    You can load and configure this library with:

        local L, cfg = moonicipal.import(require'my_lib')

        cfg.main_file = 'main.py'
    @generic L : MoonicipalRegistrar | fun(opts: MoonicipalRegistrarDecoration) | MoonicipalTask | table
    @generic C

    Parameters: ~
        {lib_gen_function}  (fun():L,C)
        {opts?}             (MoonicipalImportOptions)  Options for the import itself
                                                       @return L, C


M.tasks_lib()                                             *moonicipal.tasks_lib*
    Create a new tasks library.

    Task libraries can have tasks on them just like task files (though without
    the convenience of the |:MCedit| helper). They can be included in the tasks
    file with |moonicipal.include|, and can be merged with
    |moonicipal.merge_libs|.

    Just like a regular tasks file registrar, the task library object can be
    used to invoke the tasks from other tasks.

    Returns: ~
        (MoonicipalRegistrar|fun(opts:MoonicipalRegistrarDecoration)|MoonicipalTask|table)


M.merge_libs({lib1}, {lib2})                             *moonicipal.merge_libs*
    Merge two libraries together.

    This is the way to create library hierarchy. The child library should import
    the parent library just like a non-library tasks file would, and access it
    via the library object if it needs to run the parent's tasks from its own
    tasks, but when returning it should merge itself with the parent so that the
    user could access tasks from either.

    The merged object can then be used like a tasks library object would, with
    the difference that tasks cannot be registered on it.

    To get LuaLS to offer completions, only two libraries can be merged with a
    single call. To merge more, just merge the merged library with another
    library (or another merged library):

        `moonicipal.merge_libs(L1, moonicipal.merge_libs(L2, L3))`

    @generic L1 : table
    @generic L2 : table

    Parameters: ~
        {lib1}  (MoonicipalRegistrar|fun(opts:MoonicipalRegistrarDecoration)|MoonicipalTask|L1)
        {lib2}  (MoonicipalRegistrar|fun(opts:MoonicipalRegistrarDecoration)|MoonicipalTask|L2)

    Returns: ~
        (L1|L2)


MoonicipalInputOptions                                  *MoonicipalInputOptions*
    Fields for the `opts` argument of |moonicipal.input|.

    Fields: ~
        {prompt?}   (string)  A prompt to display to the user when they enter the text
        {default?}  (string)  A default text the user can confirm or edit


M.input({opts?})                                              *moonicipal.input*
    Use |vim.ui.input()| from a Lua coroutine, returning to the coroutine after
    the user entered text.

    Parameters: ~
        {opts?}  (MoonicipalInputOptions)

    Returns: ~
        (string|nil)   The text entered by the user


M.select({options}, {opts?})                                 *moonicipal.select*
    Use a selection UI (configured by the `selection` field of
    |MoonicipalSettings|, defaults to |vim.ui.select()|) from a Lua coroutine,
    returning to the coroutine after the user selected an option.
    @generic T

    Parameters: ~
        {options}  (MoonicipalSelectSource)
        {opts?}    (MoonicipalSelectOptions)

    Returns: ~
        (T)  @return string?


M.abort()                                                     *moonicipal.abort*
    Abort the Moonicipal invocation.

    Unlike a regular `error`, which will be caught and make Moonicipal print the
    stack trace of the error, `moonicipal.abort` will only print the message.


M.fix_echo()                                               *moonicipal.fix_echo*
    When a coroutine is resumed from a Neovim callback, lines printed from Vim's
    |:echo| or Lua's `print` will not stack up. Calling this will make them
    stack again (until the coroutine is paused and resumed from a callback again)


M.sleep({milliseconds})                                       *moonicipal.sleep*
    Pause the coroutine for the specified duration

    Parameters: ~
        {milliseconds}  (number)  The duration to sleep for, in milliseconds


                                                *moonicipal.fake_scratch_buffer*
M.fake_scratch_buffer({set_buffer_name_to?})
    Make the current buffer a scratch buffer.

    This is similar to `:set buftype=nofile`, except the buffer can work with
    LSP clients.

    Parameters: ~
        {set_buffer_name_to?}  (string)  Manually set a name for the buffer


M.get_buf_contents({buf_nr})                       *moonicipal.get_buf_contents*
    Get the contents of a buffer as a single string.

    Parameters: ~
        {buf_nr}  (number)  The buffer number

    Returns: ~
        (string)


M.set_buf_contents({buf_nr}, {content})            *moonicipal.set_buf_contents*
    Set the content of a buffer

    Parameters: ~
        {buf_nr}   (number)           The buffer number
        {content}  (string|string[])  The content to set


==============================================================================
Moonicipal setup                                              *moonicipal-setup*

Add this to your `init.lua`:
>
    require'moonicipal'.setup {
        file_prefix = '.my-username',

        -- Choose one of these, according to the one you use. Or don't set it and
        -- default to the less powerful `vim.ui.select()`.
        selection = 'moonicipal.selection.fzf-lua',
        selection = 'moonicipal.selection.telescope',
    }
<
`file_prefix` is optional - if left unset, Moonicipal will set it using the
username form the OS. See |MoonicipalSettings| for more setup options.

==============================================================================
Moonicipal quick start                                  *moonicipal-quick-start*

In a project, run `:MCedit build` (see |:MCedit|) which will open a new
tasks file that looks like this: >
    local moonicipal = require'moonicipal'
    local T = moonicipal.tasks_file()

    function T:build()
        |
    end
<
Where `|` is the location of the cursor in insert mode. Write your task -
for example, let's use |vim.cmd| to run Vim's |:make| command: >
    local moonicipal = require'moonicipal'
    local T = moonicipal.tasks_file()

    function T:build()
        vim.cmd.make()
    end
<
Save the tasks file, and run `:MC build` (see |:MC|). Alternatively, run
`:MC` and pick `build` using Neovim's selection UI. This will run your task.

Use `:MCedit` again (with or without parameter) to go back to the task file
and edit it whenever you want.

==============================================================================
Moonicipal commands                                        *moonicipal-commands*

These commands will only be created after `require'moonicipal'.setup()` is
called (see |moonicipal-setup|)

                                                                           *:MC*
The `:MC` command invokes tasks. Given a task name as argument, it invokes
the task with that name. When used without arguments, it uses
|moonicipal.select| to prompt you to choose a task, and then runs that task.

                                                                       *:MCedit*
The `:MCedit` command opens the tasks file for editing. If there is no task
file for the current project (no file with the appropriate name in the
current working directory), a new buffer will be opened for that file with a
basic template that imports Moonicipal and initializes a tasks file.

Given a task name as argument, a scaffold for a new task with that name will
be created in the tasks file, and Neovim will go into insert mode in the
appropriate position for writing the first command for that task. If a task
with that name already exists, Neovim will jump to that task but will not
add a scaffold and will not go into insert mode.

                                                                      *:MCsedit*
                                                                      *:MCvedit*
                                                                      *:MCtedit*
`:MCsedit`, `:MCvedit` and `:MCtedit` are similar to |:MCedit|, but open the
task file in a new split, vertical split, or tab.

MoonicipalSettings                                          *MoonicipalSettings*
    Settings for |moonicipal.setup|.

    Fields: ~
        {file_prefix?}               (string)                A prefix for the name of the Moonicipal tasks file.
                                                             The tasks file will end up being named
                                                             "`<file_prefix>.moonicipal.lua`". Defaults to `.$USER`.
        {tasks_selection_lru_size?}  (number)                |:MC| without argument will remember the last tasks
                                                             the user has chosen and put them at the start of the
                                                             list. This parameter controls how many tasks can be
                                                             remembered. Defaults to 5.
        {selection?}                 (string|function)       The selection UI used by |moonicipal.select| - which means it'll also be
                                                             used by other Moonicipal facilities like |:MC| or
                                                             |MoonicipalTask:cached_choice|.
                                                             Defaults to "moonicipal.selection.builtin", which uses |vim.ui.select()|,
                                                             but "moonicipal.selection.fzf-lua" and "moonicipal.selection.telescope" are
                                                             also available out of the box (as long as the respective backend plugin is
                                                             installed).
        {task_actions}               (table<string,string>)  Keymaps for the tasks selection UI (|:MC| without argument). The key is the
                                                             action name and the value is a Vim style keymap for triggering it:

                                                             * `add` - ignore the selection and add a task named after the current query.
                                                               Defaults to `<M-a>`. Note that this works like |:MCedit| - if the task
                                                               already exists it'll edit it instead of creating a new one.
                                                             * `edit` - edit the currently highlighted task. Defaults to `<M-e>`.


MoonicipalRegistrar                                        *MoonicipalRegistrar*
    The object used for registering tasks insides a tasks file, and for invoking
    other tasks as dependencies.


Moonicipal tasks are registered as methods on the registrar, but unlike
regular Lua semantics the registrar is not the `self` of these methods: >
    function T:registrar_and_task_self_are_different()
        assert(self ~= T)
    end
<
The `self` passed to these methods is a |MoonicipalTask|, used mainly for
accessing the task's cache. Meanwhil the registrar can be used from inside a
task to access other methods: >
    function T:dependency()
        return 42
    end

    function T:dependant_user()
        local value_from_dependency = T:dependency()
        assert(value_from_dependency == 42)
    end
<

MoonicipalRegistrarDecoration                    *MoonicipalRegistrarDecoration*
    Passed to the registrar object as a function argument to configure the next
    task:
        T { alias = 'other_name_for_the_task' }
        function T:some_task()
            -- task body
        end

    Fields: ~
        {alias}  (string|string[])  Allow invoking the task by some other name.
                                    Will not show in the tasks list.


Registrar:__call()                                            *Registrar:__call*


    See: ~
        |MoonicipalRegistrarDecoration|


Registrar:__index()                                          *Registrar:__index*
    Invoke another task as dependency:
        function T:dependency()
            return 42
        end

        function T:dependant_user()
            local value_from_dependency = T:dependency()
            assert(value_from_dependency == 42)
        end


Registrar:__newindex()                                    *Registrar:__newindex*
    Register a task assigning a function to the registrar object:
        T['task-name'] = function()
            -- task body
        end

    Prefer using Lua's method declaration syntax:
        function T.task_name()
            -- task body
        end


==============================================================================
API avaiable from inside a Moonicipal task                      *MoonicipalTask*

All the methods under `MoonicipalTask` can be invoked on `self` inside a
Moonicipal task.

MoonicipalTask:is_main()                                *MoonicipalTask:is_main*
    Check if this is the entry task of the current execution.

    Returns: ~
        (boolean)  | true if this task was invoked directly from a user command
                   | false if this task was invoked as a dependency of another task


                                                   *MoonicipalTask:cache_result*
MoonicipalTask:cache_result({dlg}, {...})
    Use a cached result when the task is called as a dependency.

    When the task is invoked as a main task, the function passed as argument will
    always be called.

    When the task is invoked as a dependency, the function will only be called if
    the cache is empty. Otherwise, the cached result will be restored instead.

    Note that the cache is task-bound - using this method multiple times in the
    same task will use the same cache, even if the passed functions are
    different.

        function T:dependency()
            return self:cache_result(function()
                return moonicipal.input { prompt = "Enter text" }
            end)
        end

        function T:use()
            local dependency_result = T:dependency()
            print('You have selected', vim.inspect(dependency_result))
        end
    @generic T
    @generic P

    Parameters: ~
        {dlg}  (fun(...: P): T)
        {...}  (P)

    Returns: ~
        (T)


                                              *MoonicipalTask:cached_buf_in_tab*
MoonicipalTask:cached_buf_in_tab({dlg}, {...})
    Create a buffer, and use the result only if the buffer is still open in the
    current tab.

    The buffer used for the caching is the buffer Vim ends up in when the passed
    function returns, and it must be a different buffer than the one Vim was in
    when the function was called. Vim will return to the original window -
    unless the function has swiched to a new tab.

    See `cache_result` for other notes about the cache.

        function T:log_buffer()
            return self:cached_buf_in_tab(function()
                vim.cmd[[new]]
                vim.o.buftype = 'nowrite'
                local buf_nr = vim.api.nvim_buf_get_number(0)
                return function(text)
                    vim.api.nvim_buf_set_lines(buf_nr, -1, -1, true, { text })
                end
            end)
        end

        function T:log()
            local log_buffer = T:log_buffer()
            log_buffer(moonicipal.input())
        end
    @generic T
    @generic P

    Parameters: ~
        {dlg}  (fun(...: P): T)
        {...}  (P)

    Returns: ~
        (T)


MoonicipalCachedDataCellOptions                *MoonicipalCachedDataCellOptions*

    Fields: ~
        {win?}            (function|string)  Run to create a window for the data cell buffer.
                                             Defaults to `botright new`
        {buf_init?}       (function|string)  Run only if the data cell buffer is created
        {buf?}            (function|string)  Run every time to configure the buffer
        {default?}        (string|string[])  Default text to put in the buffer when it is
                                             first created
        {fail_if_empty?}  (boolean|string)   Fail if called from a different task without setting this data cell first.

                                             If set to a string, use that string as the error message instead of the
                                             default generated template.

                                             Note that this is automatically turned on if `default` is not set. If this
                                             behavior is not desired, it can manually be set to `false`.


MoonicipalTask:cached_data_cell({opts})        *MoonicipalTask:cached_data_cell*
    Create a data cell - a buffer where the user can put data for other tasks to
    use.

    When called from the main task, it'll open the buffer (if its not already
    open) and configure it. When called from another task (meaning some other
    task invokes the task that uses `self:cached_data_cell`) it'll return the
    current content of the buffer, or `nil` if the buffer does not exist.

    The buffer will remain in memory even if the user closes it - farther
    invocations as a main task will open it with the cached text, and calls from
    other tasks will return that text. The cached will be dropped though if the
    buffer is unloaded (e.g. by using |:bdelete|)

        function T:edit_shell_command()
            return self:cached_data_cell {
                default = 'echo hello world',
                buf_init = 'setfiletype bash',
            }
        end

        function T:run_shell_command()
            local shell_command = T:edit_shell_command() or moonicipal.abort('No command')
            vim.cmd.new()
            vim.cmd.terminal(shell_command)
        end


    Parameters: ~
        {opts}  (MoonicipalCachedDataCellOptions)  @return string?


MoonicipalCachedChoiceConfiguration        *MoonicipalCachedChoiceConfiguration*

    Fields: ~
        {key}        (MoonicipalOptionTransformer)    Mandatory. How to recognize the cached option.
        {format?}    (MoonicipalOptionTransformer)    How to display the option in the selection UI.
        {preview?}   (fun(item:any):string|string[])  Previewer for the option in the selection UI.
        {priority?}  (fun(item:any):number)           Priority for the option in the selection UI.


MoonicipalTask:cached_choice({cfg?})              *MoonicipalTask:cached_choice*
    Let the user choose from several options, and use a cached result when the
    task is called as a dependency.

    Unlike `cache_result`, with this method the list of options gets computed
    even when the cache is used.

    Use the object returned by this methoid as a function to register the
    options, and then call `:select` on it to let the user choose.

        function T:choose_command()
            local cc = self:cached_choice {
                key = 'name',
                format = function(cmd)
                    return ('%s [%s]'):format(cmd.name, cmd.command)
                end,
            }
            cc {
                name = 'Show the time',
                command = 'date',
            }
            cc {
                name = 'Check internet connection',
                command = 'ping 8.8.8.8',
            }
            return cc:select()
        end

        function T:run_command()
            local chosen_command = T:choose_command()
            vim.cmd.new()
            vim.cmd['terminal'](chosen_command.command)
        end


    Parameters: ~
        {cfg?}  (MoonicipalCachedChoiceConfiguration)  The configuraiton. `key` is mandatory, and `format` is probably needed.

    Returns: ~
        (MoonicipalCachedChoice)

    See: ~
        |MoonicipalCachedChoice|


                                                        *MoonicipalCachedChoice*
MoonicipalCachedChoice : MoonicipalCachedChoiceConfiguration
    Object for registering chocies for a user to select.


CachedChoice:__call({option})                              *CachedChoice:__call*
    Add an option for the user to select.

    Parameters: ~
        {option}  (any)  The options for the user to select


CachedChoice:select()                                      *CachedChoice:select*
    Let the user choose using `moonicipal.selected`.

    When called from the main task, will always prompt the user to choose an
    option. When called from another task, will only prompt the user to choose
    an option if there is no selection in the cache, or if the cached selection
    is no longer available.

    Returns: ~
        (any)   The chosen option


MoonicipalSelectSource                                  *MoonicipalSelectSource*
    @generic T

    Type: ~
        T[]|


MoonicipalSelectOptions                                *MoonicipalSelectOptions*

    Fields: ~
        {prompt?}    (string)                                                A prompt to display to the user when they select the option.
        {format?}    (MoonicipalOptionTransformer)                           How to display the options in the selection UI.
        {multi?}     (boolean)                                               Select multiple items. Setting this to `true` will make |moonicipal.select|
                                                                             return a list - even if only one item is selected.

                                                                             This, of course, does not work for backends that don't support multiple
                                                                             selection (like the builtin |vim.ui.select()|), and they'll still allow to
                                                                             select only one item, but if `multi` is set to `true` that one item will
                                                                             still get wrapped in a list.
        {preview?}   (fun(item:any):string|string[])                         Show a preview for the item under the cursor.
        {actions?}   (string[]|table<string,MoonicipalSelectActionOptions>)  Add actions - keymaps that can be used to finalize the selection instead of
                                                                             Enter. When such a key is used, its string is returned as the second return
                                                                             value.

                                                                             The syntax for special keys is always Vim's syntax (e.g. `<C-r>`). Even when
                                                                             the backend uses a different sytnax (e.g. fzf-lua), one should still use
                                                                             Vim's sytnax and let the interaction function do the translation. The string
                                                                             returned in the second return value will still be the exact same string
                                                                             passed to `actions` - the translation is transparent to the user.

                                                                             The keycodes can be passed as either list items or dictionary keys - and
                                                                             both styles can be mixed in the same table:
                                                                             ```
                                                                             moonicipal.select({ ... }, {
                                                                                 actions = {
                                                                                     '<M-a>',
                                                                                     ['<M-a>'] = {},
                                                                                 },
                                                                             })
                                                                             ```
                                                                             When using the second style, the value is used to configure the specific
                                                                             action (see |MoonicipalSelectActionOptions|)
        {priority?}  (fun(item:any):number)                                  Reorder items according to their priority (higher is better)

                                                                             Note that this may prevent gradual loading of items.


MoonicipalSelectActionOptions                    *MoonicipalSelectActionOptions*

    Fields: ~
        {multi?}  (boolean)  Override the `multi` field from |MoonicipalSelectOptions| only for this
                             action.
        {query?}  (boolean)  Instead of the chosen item(s), return the text the user wrote in the query.


vim:tw=78:ts=8:noet:ft=help:norl:
