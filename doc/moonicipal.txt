==============================================================================
Moonicipal - Task Runner for Rapidly Changing Personal Tasks        *moonicipal*

Moonicipal is a task runner that focuses on personal tasks that are easy to
write and to change:

* Task files are personal - users can edit them without breaking the
  workflow for other developers that use the same project.
* Tasks are Lua functions that run inside Neovim - they can can easily
  access all of Neovim's context and functionalities, and easily interact
  with other Neovim plugins.
* The task functions always run in coroutines, and some helpers are provided
  for writing async code instead of using callbacks.
* The task file is reloaded each time a user runs a task, so it can be
  edited rapidly.
* Caching facilities for saving things like build configuration or
  test/example-to-run without having to change the tasks file each time.

==============================================================================
Table of Contents                                          *moonicipal.contents*

Moonicipal - Task Runner for Rapidly Changing Personal Tasks ······ |moonicipal|
Moonicipal setup ············································ |moonicipal-setup|
Moonicipal quick start ································ |moonicipal-quick-start|
Moonicipal Commands ······································ |moonicipal-commands|

==============================================================================

M.setup({config})                                             *moonicipal.setup*
    Configure Moonicipal and create the Vim commands.

    Parameters: ~
        {config}  (MoonicipalSettings)

    See: ~
        |MoonicipalSettings|


MoonicipalInputOptions                                  *MoonicipalInputOptions*
    Fields for the `opts` argument of |moonicipal.input|.

    Fields: ~
        {prompt?}   (string)  A prompt to display to the user when they enter the text
        {default?}  (string)  A default text the user can confirm or edit


M.input({opts?})                                              *moonicipal.input*
    Use |vim.ui.input()| from a Lua coroutine, returning to the coroutine after
    the user entered text.

    Parameters: ~
        {opts?}  (MoonicipalInputOptions)

    Returns: ~
        (string|nil)   The text entered by the user


MoonicipalSelectOptions                                *MoonicipalSelectOptions*

    Fields: ~
        {prompt?}  (string)                       A prompt to display to the user when they select the option
        {format?}  (MoonicipalOptionTransformer)  How to display the options in the selection UI


M.select({options}, {opts?})                                 *moonicipal.select*
    Use |vim.ui.select()| from a Lua coroutine, returning to the coroutine after
    the user selected an option.

    Parameters: ~
        {options}  (any[])                    The options for the user to select from
        {opts?}    (MoonicipalSelectOptions)


M.abort()                                                     *moonicipal.abort*
    Abort the Moonicipal invocation.

    Unlike a regular `error`, which will be caught and make Moonicipal print the
    stack trace of the error, `moonicipal.abort` will only print the message.


M.fix_echo()                                               *moonicipal.fix_echo*
    When a coroutine is resumed from a Neovim callback, lines printed from Vim's
    |:echo| or Lua's `print` will not stack up. Calling this will make them
    stack again (until the coroutine is paused and resumed from a callback again)


M.sleep({milliseconds})                                       *moonicipal.sleep*
    Pause the coroutine for the specified duration

    Parameters: ~
        {milliseconds}  (number)  The duration to sleep for, in milliseconds


                                                *moonicipal.fake_scratch_buffer*
M.fake_scratch_buffer({set_buffer_name_to?})
    Make the current buffer a scratch buffer.

    This is similar to `:set buftype=nofile`, except the buffer can work with
    LSP clients.

    Parameters: ~
        {set_buffer_name_to?}  (string)  Manually set a name for the buffer


M.get_buf_contents({buf_nr})                       *moonicipal.get_buf_contents*
    Get the contents of a buffer as a single string.

    Parameters: ~
        {buf_nr}  (number)  The buffer number

    Returns: ~
        (string)


M.set_buf_contents({buf_nr}, {content})            *moonicipal.set_buf_contents*
    Set the content of a buffer

    Parameters: ~
        {buf_nr}   (number)           The buffer number
        {content}  (string|string[])  The content to set


==============================================================================
Moonicipal setup                                              *moonicipal-setup*

Add this to your `init.lua`:
>
    require'moonicipal'.setup {
        file_prefix = '.my-username',
    }
<
`file_prefix` is optional - if left unset, Moonicipal will set it using the
username form the OS. See |MoonicipalSettings| for more setup options.

==============================================================================
Moonicipal quick start                                  *moonicipal-quick-start*

In a project, run `:MCedit build` (see |:MCedit|) which will open a new
tasks file that looks like this: >
    local moonicipal = require'moonicipal'
    local T = moonicipal.tasks_file()

    function T:build()
        |
    end
<
Where `|` is the location of the cursor in insert mode. Write your task -
for example, let's use |vim.cmd| to run Vim's |:make| command: >
    local moonicipal = require'moonicipal'
    local T = moonicipal.tasks_file()

    function T:build()
        vim.cmd.make()
    end
<
Save the tasks file, and run `:MC build` (see |:MC|). Alternatively, run
`:MC` and pick `build` using Neovim's selection UI. This will run your task.

Use `:MCedit` again (with or without parameter) to go back to the task file
and edit it whenever you want.

==============================================================================
Moonicipal Commands                                        *moonicipal-commands*

These commands will only be created after `require'moonicipal'.setup()` is
called (see |moonicipal-setup|)

                                                                           *:MC*
The `:MC` command invokes tasks. Given a task name as argument, it invokes
the task with that name. When used without arguments, it uses
|vim.ui.select()| to prompt you to choose a task, and then runs that task.

                                                                       *:MCedit*
The `:MCedit` command opens the tasks file for editing. If there is no task
file for the current project (no file with the appropriate name in the
current working directory), a new buffer will be opened for that file with a
basic template that imports Moonicipal and initializes a tasks file.

Given a task name as argument, a scaffold for a new task with that name will
be created in the tasks file, and Neovim will go into insert mode in the
appropriate position for writing the first command for that task. If a task
with that name already exists, Neovim will jump to that task but will not
add a scaffold and will not go into insert mode.

                                                                      *:MCsedit*
                                                                      *:MCvedit*
                                                                      *:MCtedit*
`:MCsedit`, `:MCvedit` and `:MCtedit` are similar to |:MCedit|, but open the
task file in a new split, vertical split, or tab.

MoonicipalSettings                                          *MoonicipalSettings*
    Settings for |moonicipal.setup|.

    Fields: ~
        {file_prefix?}               (string)  A prefix for the name of the Moonicipal tasks file.
                                               The tasks file will end up being named
                                               "`<file_prefix>.moonicipal.lua`". Defaults to `.$USER`.
        {tasks_selection_lru_size?}  (number)  |:MC| without argument will remember the last tasks
                                               the user has chosen and put them at the start of the
                                               list. This parameter controls how many tasks can be
                                               remembered. Defaults to 5.


MoonicipalTask                                                  *MoonicipalTask*

    Fields: ~
        {task_def}  (table)
        {context}   (table)
        {cache}     (table)  Data that will be there on the new run


MoonicipalTask:is_main()                                *MoonicipalTask:is_main*
     Check if this is the entry task of the current execution.
    @return
    | true # if this task was invoked directly from a user command
    | false # if this task was invoked as a dependency of another task


MoonicipalTask:cache_result({...})                 *MoonicipalTask:cache_result*

    Parameters: ~
        {...}  (P)

    Returns: ~
        (T)


MoonicipalTask:cached_buf_in_tab({...})       *MoonicipalTask:cached_buf_in_tab*

    Parameters: ~
        {...}  (P)

    Returns: ~
        (T)


CachedChoiceConfiguration                            *CachedChoiceConfiguration*

    Fields: ~
        {key}     (MoonicipalOptionTransformer)  Mandatory. How to recognize the cached option.
        {format}  (MoonicipalOptionTransformer)  How to display the option in the selection UI.


CachedChoice : CachedChoiceConfiguration                          *CachedChoice*


MoonicipalTask:cached_choice({cfg?})              *MoonicipalTask:cached_choice*

    Parameters: ~
        {cfg?}  (CachedChoiceConfiguration)  The configuraiton. `key` is mandatory, and `format` is probably needed.

    Returns: ~
        (CachedChoice)


MoonicipalCachedDataCellOptions                *MoonicipalCachedDataCellOptions*

    Fields: ~
        {win?}       (function|string)  Run to create a window for the data cell buffer. Defaults to `botright new`
        {buf_init?}  (function|string)  Run only if the data cell buffer is created
        {buf?}       (function|string)  Run every time to configure the buffer
        {default?}   (string|string[])  yup


MoonicipalTask:cached_data_cell({opts})        *MoonicipalTask:cached_data_cell*

    Parameters: ~
        {opts}  (MoonicipalCachedDataCellOptions)  @return string?


vim:tw=78:ts=8:noet:ft=help:norl:
