==============================================================================
Moonicipal - Task Runner for Rapidly Changing Personal Tasks        *moonicipal*

Moonicipal is a task runner that focuses on personal tasks that are easy to
write and to change:

* Task files are personal - users can edit them without breaking the
  workflow for other developers that use the same project.
* Tasks are Lua functions that run inside Neovim - they can can easily
  access all of Neovim's context and functionalities, and easily interact
  with other Neovim plugins.
* The task functions always run in coroutines, and some helpers are provided
  for writing async code instead of using callbacks.
* The task file is reloaded each time a user runs a task, so it can be
  edited rapidly.
* Caching facilities for saving things like build configuration or
  test/example-to-run without having to change the tasks file each time.

Moonicipal is the successor to the Pythonic test runner Omnipytent
(https://github.com/idanarye/vim-omnipytent). Since Moonicipal is written in
Lua and executes tasks that are written in Lua, it allows for better
integration with Neovim and with Lua plugins and for simpler semantics of
asynchronous tasks.

==============================================================================
Table of Contents                                          *moonicipal.contents*

Moonicipal - Task Runner for Rapidly Changing Personal Tasks ······ |moonicipal|
Moonicipal setup ············································ |moonicipal-setup|
Moonicipal quick start ································ |moonicipal-quick-start|
Moonicipal commands ······································ |moonicipal-commands|
API avaiable from inside a Moonicipal task ···················· |MoonicipalTask|

==============================================================================

M.setup({config})                                             *moonicipal.setup*
    Configure Moonicipal and create the Vim commands.

    Parameters: ~
        {config}  (MoonicipalSettings)

    See: ~
        |MoonicipalSettings|


MoonicipalInputOptions                                  *MoonicipalInputOptions*
    Fields for the `opts` argument of |moonicipal.input|.

    Fields: ~
        {prompt?}   (string)  A prompt to display to the user when they enter the text
        {default?}  (string)  A default text the user can confirm or edit


M.input({opts?})                                              *moonicipal.input*
    Use |vim.ui.input()| from a Lua coroutine, returning to the coroutine after
    the user entered text.

    Parameters: ~
        {opts?}  (MoonicipalInputOptions)

    Returns: ~
        (string|nil)   The text entered by the user


MoonicipalSelectOptions                                *MoonicipalSelectOptions*

    Fields: ~
        {prompt?}  (string)                       A prompt to display to the user when they select the option
        {format?}  (MoonicipalOptionTransformer)  How to display the options in the selection UI


M.select({options}, {opts?})                                 *moonicipal.select*
    Use |vim.ui.select()| from a Lua coroutine, returning to the coroutine after
    the user selected an option.

    Parameters: ~
        {options}  (any[])                    The options for the user to select from
        {opts?}    (MoonicipalSelectOptions)


M.abort()                                                     *moonicipal.abort*
    Abort the Moonicipal invocation.

    Unlike a regular `error`, which will be caught and make Moonicipal print the
    stack trace of the error, `moonicipal.abort` will only print the message.


M.fix_echo()                                               *moonicipal.fix_echo*
    When a coroutine is resumed from a Neovim callback, lines printed from Vim's
    |:echo| or Lua's `print` will not stack up. Calling this will make them
    stack again (until the coroutine is paused and resumed from a callback again)


M.sleep({milliseconds})                                       *moonicipal.sleep*
    Pause the coroutine for the specified duration

    Parameters: ~
        {milliseconds}  (number)  The duration to sleep for, in milliseconds


                                                *moonicipal.fake_scratch_buffer*
M.fake_scratch_buffer({set_buffer_name_to?})
    Make the current buffer a scratch buffer.

    This is similar to `:set buftype=nofile`, except the buffer can work with
    LSP clients.

    Parameters: ~
        {set_buffer_name_to?}  (string)  Manually set a name for the buffer


M.get_buf_contents({buf_nr})                       *moonicipal.get_buf_contents*
    Get the contents of a buffer as a single string.

    Parameters: ~
        {buf_nr}  (number)  The buffer number

    Returns: ~
        (string)


M.set_buf_contents({buf_nr}, {content})            *moonicipal.set_buf_contents*
    Set the content of a buffer

    Parameters: ~
        {buf_nr}   (number)           The buffer number
        {content}  (string|string[])  The content to set


==============================================================================
Moonicipal setup                                              *moonicipal-setup*

Add this to your `init.lua`:
>
    require'moonicipal'.setup {
        file_prefix = '.my-username',
    }
<
`file_prefix` is optional - if left unset, Moonicipal will set it using the
username form the OS. See |MoonicipalSettings| for more setup options.

==============================================================================
Moonicipal quick start                                  *moonicipal-quick-start*

In a project, run `:MCedit build` (see |:MCedit|) which will open a new
tasks file that looks like this: >
    local moonicipal = require'moonicipal'
    local T = moonicipal.tasks_file()

    function T:build()
        |
    end
<
Where `|` is the location of the cursor in insert mode. Write your task -
for example, let's use |vim.cmd| to run Vim's |:make| command: >
    local moonicipal = require'moonicipal'
    local T = moonicipal.tasks_file()

    function T:build()
        vim.cmd.make()
    end
<
Save the tasks file, and run `:MC build` (see |:MC|). Alternatively, run
`:MC` and pick `build` using Neovim's selection UI. This will run your task.

Use `:MCedit` again (with or without parameter) to go back to the task file
and edit it whenever you want.

==============================================================================
Moonicipal commands                                        *moonicipal-commands*

These commands will only be created after `require'moonicipal'.setup()` is
called (see |moonicipal-setup|)

                                                                           *:MC*
The `:MC` command invokes tasks. Given a task name as argument, it invokes
the task with that name. When used without arguments, it uses
|vim.ui.select()| to prompt you to choose a task, and then runs that task.

                                                                       *:MCedit*
The `:MCedit` command opens the tasks file for editing. If there is no task
file for the current project (no file with the appropriate name in the
current working directory), a new buffer will be opened for that file with a
basic template that imports Moonicipal and initializes a tasks file.

Given a task name as argument, a scaffold for a new task with that name will
be created in the tasks file, and Neovim will go into insert mode in the
appropriate position for writing the first command for that task. If a task
with that name already exists, Neovim will jump to that task but will not
add a scaffold and will not go into insert mode.

                                                                      *:MCsedit*
                                                                      *:MCvedit*
                                                                      *:MCtedit*
`:MCsedit`, `:MCvedit` and `:MCtedit` are similar to |:MCedit|, but open the
task file in a new split, vertical split, or tab.

MoonicipalSettings                                          *MoonicipalSettings*
    Settings for |moonicipal.setup|.

    Fields: ~
        {file_prefix?}               (string)  A prefix for the name of the Moonicipal tasks file.
                                               The tasks file will end up being named
                                               "`<file_prefix>.moonicipal.lua`". Defaults to `.$USER`.
        {tasks_selection_lru_size?}  (number)  |:MC| without argument will remember the last tasks
                                               the user has chosen and put them at the start of the
                                               list. This parameter controls how many tasks can be
                                               remembered. Defaults to 5.


==============================================================================
API avaiable from inside a Moonicipal task                      *MoonicipalTask*

All the methods under `MoonicipalTask` can be invoked on `self` inside a
Moonicipal task.

MoonicipalTask:is_main()                                *MoonicipalTask:is_main*
    Check if this is the entry task of the current execution.

    Returns: ~
        (boolean)  | true if this task was invoked directly from a user command
                   | false if this task was invoked as a dependency of another task


                                                   *MoonicipalTask:cache_result*
MoonicipalTask:cache_result({dlg}, {...})
    Use a cached result when the task is called as a dependency.

    When the task is invoked as a main task, the function passed as argument will
    always be called.

    When the task is invoked as a dependency, the function will only be called if
    the cache is empty. Otherwise, the cached result will be restored instead.

    Note that the cache is task-bound - using this method multiple times in the
    same task will use the same cache, even if the passed functions are
    different.

        function T:dependency()
            return self:cache_result(function()
                return moonicipal.input { prompt = "Enter text: " }
            end)
        end

        function T:use()
            local dependency_result = T:dependency()
            print('You have selected', vim.inspect(dependency_result))
        end
    @generic T
    @generic P

    Parameters: ~
        {dlg}  (fun(...: P): T)
        {...}  (P)

    Returns: ~
        (T)


                                              *MoonicipalTask:cached_buf_in_tab*
MoonicipalTask:cached_buf_in_tab({dlg}, {...})
    Create a buffer, and use the result only if the buffer is still open in the
    current tab.

    The buffer used for the caching is the buffer Vim ends up in when the passed
    function returns, and it must be a different buffer than the one Vim was in
    when the function was called. Vim will return to the original window -
    unless the function has swiched to a new tab.

    See `cache_result` for other notes about the cache.

        function T:log_buffer()
            return self:cached_buf_in_tab(function()
                vim.cmd[[new]]
                vim.o.buftype = 'nowrite'
                local buf_nr = vim.api.nvim_buf_get_number(0)
                return function(text)
                    vim.api.nvim_buf_set_lines(buf_nr, -1, -1, true, { text })
                end
            end)
        end

        function T:log()
            local log_buffer = T:log_buffer()
            log_buffer(moonicipal.input())
        end
    @generic T
    @generic P

    Parameters: ~
        {dlg}  (fun(...: P): T)
        {...}  (P)

    Returns: ~
        (T)


MoonicipalCachedDataCellOptions                *MoonicipalCachedDataCellOptions*

    Fields: ~
        {win?}       (function|string)  Run to create a window for the data cell buffer.
                                        Defaults to `botright new`
        {buf_init?}  (function|string)  Run only if the data cell buffer is created
        {buf?}       (function|string)  Run every time to configure the buffer
        {default?}   (string|string[])  Default text to put in the buffer when it is
                                        first created


MoonicipalTask:cached_data_cell({opts})        *MoonicipalTask:cached_data_cell*
    Create a data cell - a buffer where the user can put data for other tasks to
    use.

    When called from the main task, it'll open the buffer (if its not already
    open) and configure it. When called from another task (meaning some other
    task invokes the task that uses `self:cached_data_cell`) it'll return the
    current content of the buffer, or `nil` if the buffer does not exist.

    The buffer will remain in memory even if the user closes it - farther
    invocations as a main task will open it with the cached text, and calls from
    other tasks will return that text. The cached will be dropped though if the
    buffer is unloaded (e.g. by using |:bdelete|)

        function T:edit_shell_command()
            return self:cached_data_cell {
                default = 'echo hello world',
                buf_init = 'setfiletype bash',
            }
        end

        function T:run_shell_command()
            local shell_command = T:edit_shell_command() or moonicipal.abort('No command')
            vim.cmd.new()
            vim.cmd.terminal(shell_command)
        end


    Parameters: ~
        {opts}  (MoonicipalCachedDataCellOptions)  @return string?


MoonicipalCachedChoiceConfiguration        *MoonicipalCachedChoiceConfiguration*

    Fields: ~
        {key}     (MoonicipalOptionTransformer)  Mandatory. How to recognize the cached option.
        {format}  (MoonicipalOptionTransformer)  How to display the option in the selection UI.


MoonicipalTask:cached_choice({cfg?})              *MoonicipalTask:cached_choice*
    Let the user choose from several options, and use a cached result when the
    task is called as a dependency.

    Unlike `cache_result`, with this method the list of options gets computed
    even when the cache is used.

    Use the object returned by this methoid as a function to register the
    options, and then call `:select` on it to let the user choose.

        function T:choose_command()
            local cc = self:cached_choice {
                key = 'name',
                format = function(cmd)
                    return ('%s [%s]'):format(cmd.name, cmd.command)
                end,
            }
            cc {
                name = 'Show the time',
                command = 'date',
            }
            cc {
                name = 'Check internet connection',
                command = 'ping 8.8.8.8',
            }
            return cc:select()
        end

        function T:run_command()
            local chosen_command = T:choose_command()
            vim.cmd.new()
            vim.cmd['terminal'](chosen_command.command)
        end


    Parameters: ~
        {cfg?}  (MoonicipalCachedChoiceConfiguration)  The configuraiton. `key` is mandatory, and `format` is probably needed.

    Returns: ~
        (MoonicipalCachedChoice)

    See: ~
        |MoonicipalCachedChoice|


                                                        *MoonicipalCachedChoice*
MoonicipalCachedChoice : MoonicipalCachedChoiceConfiguration
    Object for registering chocies for a user to select.


CachedChoice:__call({option})                              *CachedChoice:__call*
    Add an option for the user to select.

    Parameters: ~
        {option}  (any)  The options for the user to select


CachedChoice:select()                                      *CachedChoice:select*
    Let the user choose using `moonicipal.selected`.

    When called from the main task, will always prompt the user to choose an
    option. When called from another task, will only prompt the user to choose
    an option if there is no selection in the cache, or if the cached selection
    is no longer available.

    Returns: ~
        (any)   The chosen option


vim:tw=78:ts=8:noet:ft=help:norl:
